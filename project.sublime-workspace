{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"re",
				"regen_view"
			],
			[
				"sha",
				"shader_id"
			],
			[
				"int",
				"interface"
			],
			[
				"cl",
				"closest"
			],
			[
				"draw",
				"draw_attraction"
			],
			[
				"leaf",
				"leaf_color"
			],
			[
				"at",
				"get_attraction_points"
			],
			[
				"si",
				"simulation_time"
			],
			[
				"tre",
				"trees"
			],
			[
				"Tre",
				"RenderableTree"
			],
			[
				"Re",
				"RenderableTree"
			],
			[
				"bra",
				"branches"
			],
			[
				"in",
				"intersections"
			],
			[
				"atr",
				"attraction_point"
			],
			[
				"A",
				"AttractionPoint"
			],
			[
				"te",
				"tex_size"
			],
			[
				"tex",
				"tex_size"
			],
			[
				"pr",
				"printf	printf â€¦"
			],
			[
				"pu",
				"push_back"
			],
			[
				"vec",
				"vector	std::vector"
			],
			[
				"fi",
				"fill"
			],
			[
				"bot",
				"bottom_left"
			],
			[
				"top",
				"top_right"
			],
			[
				"Vox",
				"VoxelGrid"
			],
			[
				"add",
				"add_cube"
			],
			[
				"vo",
				"voxel_size"
			],
			[
				"x",
				"x_pos"
			],
			[
				"vert",
				"vertexbuffer"
			],
			[
				"he",
				"height"
			],
			[
				"branch_ra",
				"branch_radius_parser"
			],
			[
				"par",
				"parser_constants"
			],
			[
				"de",
				"descendants"
			],
			[
				"reg",
				"regenerate_vertex_lists"
			],
			[
				"lea",
				"leaf_scales"
			],
			[
				"leaf_s",
				"leaf_scales_vbo"
			],
			[
				"l",
				"location"
			],
			[
				"ro",
				"rotation_attribute_location"
			],
			[
				"siz",
				"sizeof"
			],
			[
				"leaf_rotation_",
				"leaf_rotation_0"
			],
			[
				"ran",
				"random_rotation_axis"
			],
			[
				"li",
				"live_branches"
			],
			[
				"ba",
				"batch_end"
			],
			[
				"end",
				"end_branch"
			],
			[
				"leaf_a",
				"leaf_axes"
			],
			[
				"p",
				"push_back"
			],
			[
				"cot",
				"continue"
			],
			[
				"roo",
				"root_height"
			],
			[
				"tru",
				"trunk_height"
			],
			[
				"leaf_r",
				"leaf_rotation_vbo"
			],
			[
				"leaf_an",
				"leaf_rotation_vbo"
			],
			[
				"po",
				"position"
			],
			[
				"no",
				"normal"
			],
			[
				"sid",
				"side2"
			],
			[
				"tri",
				"triangle_normals"
			],
			[
				"tr",
				"Triangle"
			],
			[
				"to",
				"to_up"
			],
			[
				"to_",
				"to_down"
			],
			[
				"ne",
				"next_x"
			],
			[
				"pre",
				"prev_x"
			],
			[
				"ma",
				"max_z"
			],
			[
				"ver",
				"vertex_normal"
			],
			[
				"nor",
				"normals_vbo"
			],
			[
				"z",
				"z_steps"
			],
			[
				"ps",
				"pstep"
			],
			[
				"le",
				"leaf_model"
			],
			[
				"index",
				"indexes"
			],
			[
				"idx",
				"indexes"
			],
			[
				"mod",
				"model_delta"
			],
			[
				"las",
				"last_model_frame"
			],
			[
				"mo",
				"model_fps"
			],
			[
				"up",
				"updating"
			],
			[
				"ve",
				"verts2"
			],
			[
				"size",
				"sizes"
			],
			[
				"norm",
				"normal_matrix"
			],
			[
				"tree",
				"treerenderer"
			],
			[
				"un",
				"unlock"
			],
			[
				"simul",
				"simulate"
			],
			[
				"Tree",
				"TreeRenderer"
			],
			[
				"rene",
				"renderer"
			],
			[
				"ind",
				"indexs"
			],
			[
				"ra",
				"radius"
			],
			[
				"la",
				"latitude_strips"
			],
			[
				"new",
				"new_pos"
			],
			[
				"leav",
				"leaves_in_range"
			],
			[
				"st",
				"std"
			],
			[
				"rad",
				"radii"
			],
			[
				"_",
				"_grow"
			],
			[
				"gr",
				"grow_direction"
			],
			[
				"ang",
				"angle"
			],
			[
				"ge",
				"geometry_shader_path"
			],
			[
				"Branc",
				"BranchShader"
			],
			[
				"y",
				"yrot"
			],
			[
				"pix",
				"pixelHeight"
			],
			[
				"pi",
				"pixelWidth"
			],
			[
				"gl",
				"GLuint"
			],
			[
				"norma",
				"normalized"
			],
			[
				"dlight",
				"dlight_direction"
			],
			[
				"sl",
				"slight_intens"
			],
			[
				"dl",
				"dlight_intens"
			],
			[
				"sp",
				"specialkey"
			],
			[
				"pl",
				"plight_intens"
			],
			[
				"SL",
				"Slight_Target"
			],
			[
				"PL",
				"Plight_Position"
			],
			[
				"edi",
				"current_edit"
			],
			[
				"DL",
				"Dlight_Direction"
			],
			[
				"P",
				"Plight_Position"
			],
			[
				"ed",
				"current_edit"
			],
			[
				"Rea",
				"ReadNormalTexture"
			],
			[
				"has",
				"has_normal"
			],
			[
				"Gl",
				"GLuint"
			],
			[
				"of",
				"ofilename"
			],
			[
				"GL",
				"GL_LIGHT1"
			],
			[
				"sl_di",
				"sl_diffuse"
			],
			[
				"sl_d",
				"sl_diffuse"
			],
			[
				"sli",
				"slight_exponent"
			],
			[
				"gl_No",
				"gl_NormalMatrix"
			],
			[
				"glUn",
				"glUniform1i"
			],
			[
				"lig",
				"light1_position"
			],
			[
				"glFr",
				"gl_FragColor"
			],
			[
				"gpOp",
				"glPopAttrib"
			],
			[
				"glPush",
				"glPushMatrix"
			],
			[
				"lgi",
				"light0_direction"
			],
			[
				"light",
				"light0_direction"
			],
			[
				"l1_",
				"l1_specular"
			],
			[
				"ligh",
				"light1_position"
			],
			[
				"l1_d",
				"l1_direction"
			],
			[
				"dir",
				"direction"
			],
			[
				"spe",
				"specular"
			]
		]
	},
	"buffers":
	[
		{
			"file": "main.cpp",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tree.hpp",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tree.cpp",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "voxels.hpp",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "voxels.cpp",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "branch.hpp",
			"settings":
			{
				"buffer_size": 525,
				"line_ending": "Unix"
			}
		},
		{
			"file": "branch.cpp",
			"settings":
			{
				"buffer_size": 800,
				"line_ending": "Unix"
			}
		},
		{
			"file": "treerenderer.hpp",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "treerenderer.cpp",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "userinterface.hpp",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "userinterface.cpp",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#pragma once\n\n#include \"glHeaders.hpp\"\n#define GLM_FORCE_RADIANS\n#include <glm/glm.hpp>\n#include <vector>\n#include <map>\n\nusing namespace glm;\n\nclass LeafModel{\nprivate:\n\n	float PI = 3.141592653589793f;\n	int x_steps = 15;\n	int z_steps = 4;\n	float scale = 5;\n\n	\npublic:\n	GLuint vao = 0;\n	GLuint points_vbo;\n	GLuint colours_vbo;\n	GLuint normals_vbo;\n	int size;\n	LeafModel();\n	void bind();\n};\n",
			"file": "leafmodel.hpp",
			"file_size": 390,
			"file_write_time": 130580591579911328,
			"settings":
			{
				"buffer_size": 390,
				"line_ending": "Unix"
			}
		},
		{
			"file": "leafmodel.cpp",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "random.hpp",
			"settings":
			{
				"buffer_size": 269,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "(1-cos(u)) * sin(u) * cos(u)\n2.5 * (1 - cos(u))\n1.15 * sin(u) * sin(v)",
			"settings":
			{
				"buffer_size": 70,
				"line_ending": "Unix"
			}
		},
		{
			"file": "shader.hpp",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "shader.cpp",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"raytracer.hpp\"\n#include \"bmp.h\"\n\n#include <stdint.h> \n#include <string>\n#include <iostream>\n#include <fstream>\n\n// adapted from http://www.opengl-tutorial.org/beginners-tutorials/tutorial-5-a-textured-cube/\nvoid ShadePlane::ReadBMP(std::string location){\n    // Data read from the header of the BMP file\n	uint8_t header[54]; // Each BMP file begins by a 54-bytes header\n	unsigned int dataPos;     // Position in the file where the actual data begins\n	unsigned int imageSize;   // = width*height*3\n\n	// Open the file\n	FILE * file = fopen(location.c_str(),\"rb\");\n	if (!file){\n		printf(\"Image could not be opened\\n\");\n		exit(-1);\n	}\n\n	if ( fread(header, 1, 54, file)!=54 ){ // If not 54 bytes read : problem\n	    printf(\"Not a correct BMP file\\n\");\n	    exit(-1);\n	}\n\n	if ( header[0]!='B' || header[1]!='M' ){\n	    printf(\"Not a correct BMP file\\n\");\n	    exit(-1);\n	}\n\n	dataPos    		= *(int*)&(header[0x0A]);\n	imageSize  		= *(int*)&(header[0x22]);\n	shade_map.w     = *(int*)&(header[0x12]);\n	shade_map.h     = *(int*)&(header[0x16]);\n\n	// Some BMP files are misformatted, guess missing information\n	if (imageSize==0)    imageSize=shade_map.w*shade_map.h*3; // 3 : one byte for each Red, Green and Blue component\n	if (dataPos==0)      dataPos=54; // The BMP header is done that way\n\n	shade_map.pixels = new uint8_t [imageSize];\n \n	// Read the actual data from the file into the buffer\n	fread(shade_map.pixels,1,imageSize,file);\n	 \n	//Everything is in memory now, the file can be closed\n	fclose(file);\n\n}\n\n\nShadePlane::ShadePlane(std::string shade_map_file, float _width, float _height, vec3 _p, vec3 _n): shade_width(_width), shade_height(_height), p(_p), n(_n){\n	ReadBMP(shade_map_file);\n}\n\nShadePlane::~ShadePlane(){\n	\n}\n\n\nvoid ShadePlane::calulate_light_level(Ray &ray){\n	if (dot(ray.d, n)){\n		float along = dot(p - ray.p, n)/dot(ray.d, n);\n		vec3 isct = ray.p + ray.d * along;\n\n		float x = ((isct.x - shade_x)/shade_width ) * shade_map.w;\n		float y = ((isct.z - shade_y)/shade_height) * shade_map.h;\n\n		printf(\" -> (%f, %f) -> (%f, %f) = \", ray.p.x, ray.p.z, x, y);\n		if (0 < x && x < shade_map.w && 0 < y && y < shade_map.h){\n			printf(\"%d\\n\", shade_map.pixels[(int(y) * shade_map.w + int(x))*3]);\n			ray.intens = (shade_map.pixels[(int(y) * shade_map.w + int(x))*3])/255.f;\n		} else {\n			printf(\"{}\\n\");\n		}\n	} //else  no intersection\n\n}\n\nRayTracer::RayTracer(){\n	shade_plane = new ShadePlane(\"shade.bmp\", 100, 100, vec3(0, 10, 0), vec3(0,1,0));\n}\n\nRayTracer::~RayTracer(){\n	delete shade_plane;\n}\n\n\nGLuint RayTracer::create_texture(float width, float height, vec3 light){\n	GLuint textureID;\n	glGenTextures(1, &textureID);\n	glBindTexture(GL_TEXTURE_2D, textureID);\n\n	int tex_size = 256;\n\n	uint8_t pixels[tex_size][tex_size][3];\n	for (int y=0;y<tex_size;++y){\n		for (int x=0;x<tex_size;++x){\n			vec3 pos((x/float(tex_size)) * width, 0, (y/float(tex_size))* height);\n			printf(\"(%d, %d, %d) \", x, 0, y);\n\n			Ray ray(pos, light-pos);\n			shade_plane->calulate_light_level(ray);\n\n			uint8_t i = uint8_t(ray.intens * 255.f);\n\n			pixels[x][y][0] = i;\n			pixels[x][y][1] = i;\n			pixels[x][y][2] = i;\n		}\n	}\n	//glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, tex_size, tex_size, 0, GL_RGB, GL_UNSIGNED_BYTE, shade_plane->shade_map.pixels);\n	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, tex_size, tex_size, 0, GL_RGB, GL_UNSIGNED_BYTE, pixels);\n\n\n	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n	float color[] = { 1.0f, 0.0f, 0.0f, 1.0f };\n	glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, color);\n	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\n	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\n\n	return textureID;\n}\n\n",
			"file": "raytracer.cpp",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 3731,
				"line_ending": "Unix"
			}
		},
		{
			"file": "shaders/branch-vertex.glsl",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "shaders/branch-geometry.glsl",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "layout(points) in;"
			}
		},
		{
			"file": "shaders/branch-fragment.glsl",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "shaders/leaf-vertex.glsl",
			"settings":
			{
				"buffer_size": 1305,
				"line_ending": "Unix",
				"name": "layout(location = 0) in vec3 vertex_position;"
			}
		},
		{
			"file": "shaders/grid-vertex.glsl",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "shaders/basic-texture-fragment.glsl",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "shaders/leaf-fragment.glsl",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "shaders/leaf-debug-vertex.glsl",
			"settings":
			{
				"buffer_size": 662,
				"line_ending": "Unix"
			}
		},
		{
			"file": "shaders/leaf-debug-geometry.glsl",
			"settings":
			{
				"buffer_size": 1225,
				"line_ending": "Unix"
			}
		},
		{
			"file": "shaders/sphere-geometry.glsl",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/python2.sublime-build",
	"command_palette":
	{
		"height": 372.0,
		"selected_items":
		[
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"lin",
				"SublimeLinter: Show All Errors"
			],
			[
				"lint",
				"SublimeLinter: Show All Errors"
			],
			[
				"diff",
				"Git: Diff Current File"
			],
			[
				"syntax c++",
				"Set Syntax: C++"
			],
			[
				"lint sett",
				"Preferences: SublimeLinter Settings â€“ Default"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"linter key",
				"Preferences: SublimeLinter Key Bindings â€“ Default"
			],
			[
				"linter set",
				"Preferences: SublimeLinter Settings â€“ Default"
			],
			[
				"linter",
				"SublimeLinter: Enable Debug Mode"
			],
			[
				"toggle",
				"SublimeLinter: Toggle Linter"
			],
			[
				"blame",
				"Git: Blame"
			],
			[
				"git add",
				"Git: Add Selected Hunk"
			],
			[
				"gui",
				"Git: Gui"
			],
			[
				"sublimelinter",
				"SublimeLinter: Show All Errors"
			],
			[
				"disable",
				"SublimeLinter: Disable Linting"
			],
			[
				"show",
				"SublimeLinter: Donâ€™t Show Errors on Save"
			],
			[
				"link",
				"Preferences: SublimeLinter Key Bindings â€“ Default"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"Package Control: li",
				"Package Control: List Packages"
			],
			[
				"histor",
				"GitHub: History"
			],
			[
				"histo",
				"Git: Commit history"
			],
			[
				"add",
				"Git: Add..."
			],
			[
				"git",
				"Git: Gui"
			],
			[
				"history",
				"Git: Commit history"
			],
			[
				"ali",
				"Preferences: Alignment Key Bindings â€“ Default"
			],
			[
				"Align",
				"Preferences: Alignment Key Bindings â€“ Default"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"hist",
				"GitHub: History"
			],
			[
				"branc",
				"Git: New Branch"
			],
			[
				"brach",
				"Git: Change Branch"
			],
			[
				"pop",
				"Git: Stash Pop"
			],
			[
				"stash",
				"Git: Stash Changes"
			],
			[
				"branch",
				"Git: New Branch"
			],
			[
				"pull",
				"Git: Pull"
			],
			[
				"brac",
				"Git: Change Branch"
			],
			[
				"github ",
				"GitHub: View"
			],
			[
				"push br",
				"Git: Push Current Branch"
			],
			[
				"push ",
				"Git: Push Current Branch"
			],
			[
				"push",
				"Git: Push"
			],
			[
				"git: gui",
				"Git: Gui"
			],
			[
				"commit",
				"Git: Commit"
			],
			[
				"git gui",
				"Git: Gui"
			],
			[
				"revert",
				"File: Revert"
			],
			[
				"commi",
				"Git: Commit"
			],
			[
				"merge",
				"Git: Merge Branch"
			],
			[
				"chec",
				"Git: Change Branch"
			],
			[
				"stasg",
				"Git: Stash Changes"
			],
			[
				"package in",
				"Package Control: Install Package"
			],
			[
				"commit ",
				"GitGutter: Compare Against Commit"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"goto",
				"Goto Documentation"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"Package Control: rem",
				"Package Control: Remove Package"
			],
			[
				"gitcommit mes",
				"Git: Diff: between last local commit and remote (..origin/master)"
			],
			[
				"todo",
				"Show TODOs: Project and open files"
			],
			[
				"Show ",
				"Show TODOs: Project and open files"
			],
			[
				"instaLL",
				"Package Control: Install Package"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 677.0,
		"history":
		[
			"reverse",
			"view.run_command('alignment')",
			"view.run_command(\"SublimeTODO.todo\")",
			"view.run_command(\"SublimeTODO\")",
			"view.run_command(\"print SublimeTODO\")",
			"view.run_command(\"print __globals__\")",
			"view.run_command(\"\")",
			"view.run_command",
			"view",
			"sublime_plugin",
			"SublimeTODO",
			"GitCommitMsg.GitCommitMsg.run()",
			"GitCommitMsg.GitCommitMsg",
			"GitCommitMsg",
			"import GitCommitMsg",
			"import SublimeTODO",
			"import",
			"exit(0)",
			"print(__gloabls__)",
			"print(SublimeTODO)",
			"print(GitCommitMsg)",
			"print GitCommitMsg",
			"system('pwd')",
			"pwd",
			"window.run_command(\"show_panel\", {\"panel\": \"output.variable_get\"})",
			"output.run_command('append', {'characters': 'asdasdasd'})",
			"output.run_command('append', {'characters': variable})",
			"output.run_command('erase_view')",
			"output = window.create_output_panel(\"variable_get\")",
			"window.show_panel",
			"window",
			"show_panel",
			"sublime.window.run_command(\"show_panel\", {\"panel\": \"output.\" + panel_name})",
			"self.window.run_command(\"show_panel\", {\"panel\": \"output.\" + panel_name})",
			"print(\"a\")",
			"print \"a\"",
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/simon/workspace/comp-308-project/tree.json",
		"/home/simon/workspace/comp-308-project/shaders/branch-debug-geometry.glsl",
		"/home/simon/workspace/comp-308-project/shaders/branch-debug-debug-geometry.glsl",
		"/home/simon/workspace/comp-308-project/shaders/basic-texture-vertex.glsl",
		"/home/simon/workspace/comp-308-project/CMakeLists.txt",
		"/home/simon/workspace/comp-308-project/G308_ImageLoader.hpp",
		"/home/simon/workspace/comp-308-project/G308_ImageLoader.cpp",
		"/home/simon/workspace/comp-308-project/shaders/basic-vertex.glsl",
		"/home/simon/workspace/comp-308-project/shaders/basic-texture-fragment.glsl",
		"/home/simon/workspace/comp-308-project/raytracer.cpp",
		"/home/simon/workspace/comp-308-project/bmp.h",
		"/home/simon/workspace/comp-308-project/raytracer.hpp",
		"/home/simon/workspace/comp-308-midterm/main.cpp",
		"/home/simon/workspace/comp-308-project/external/glew/src/CMakeLists.txt",
		"/home/simon/workspace/comp-308-project/external/glew/CMakeLists.txt",
		"/home/simon/workspace/comp-308-project/external/muparser/CMakeLists.txt",
		"/home/simon/workspace/comp-308-project/external/muparser/include/muParserBase.h",
		"/home/simon/workspace/comp-308-project/tree.hpp",
		"/tmp/antons_opengl_tutorials_book/03_vertex_buffer_objects/main.cpp",
		"/home/simon/workspace/comp-308-project/shaders/basic-vertex-debug.glsl",
		"/home/simon/workspace/comp-308-project/shaders/debug-leaf.glsl",
		"/home/simon/workspace/comp-308-project/test.cpp",
		"/home/simon/workspace/comp-308-project/userinterface.cpp",
		"/home/simon/workspace/comp-308-project/userinterface.hpp",
		"/home/simon/workspace/comp-308-project/random.cpp",
		"/home/simon/workspace/comp-308-project/random.hpp",
		"/home/simon/.config/sublime-text-3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
		"/home/simon/Desktop/domain.txt",
		"/home/simon/workspace/comp-308-project/build/log.txt",
		"/home/simon/workspace/comp-308-project/log.txt",
		"/home/simon/workspace/comp-308-project/shader.cpp",
		"/home/simon/workspace/comp-308-project/shader.hpp",
		"/home/simon/workspace/comp-308-project/simulation.cpp",
		"/home/simon/workspace/comp-308-project/simulation.hpp",
		"/home/simon/workspace/comp-308-project/treerender.hpp",
		"/home/simon/workspace/comp-308-project/shaders/leaf-geometry.glsl",
		"/home/simon/workspace/comp-308-project/render.hpp",
		"/home/simon/workspace/comp-308-project/branch.hpp",
		"/home/simon/workspace/comp-308-project/tree.cpp",
		"/home/simon/workspace/comp-308-project/_/stem.cpp",
		"/home/simon/.config/sublime-text-3/Packages/SublimeLinter/Default (Linux).sublime-keymap",
		"/home/simon/workspace/comp-308-project/node.hpp",
		"/home/simon/workspace/comp-308-project/leaf.hpp",
		"/home/simon/workspace/comp-308-project/node.cpp",
		"/home/simon/workspace/comp-308-project/stem.cpp",
		"/home/simon/workspace/comp-308-project/stem.hpp",
		"/home/simon/workspace/comp-308-project/build/Makefile",
		"/home/simon/workspace/comp-308-project/mesh.cpp",
		"/home/simon/workspace/comp-308-project/main.cpp",
		"/home/simon/workspace/comp-308-project/stem.cppp",
		"/home/simon/scripts/spotdupes.py",
		"/home/simon/workspace/comp-308-project/loadShader.cpp",
		"/home/simon/workspace/comp-308-project/loadShader.hpp",
		"/home/simon/workspace/comp-308-project/shaders/phong.frag",
		"/home/simon/workspace/comp-308-project/bud.hpp",
		"/home/simon/workspace/comp-308-project/mesh.hpp",
		"/home/simon/workspace/comp-308-project/shaders/phong.vert",
		"/home/simon/workspace/comp-308-project/shaders/vert_basic.glsl",
		"/home/simon/workspace/comp-308-project/shaders/frag_basic.glsl",
		"/home/simon/workspace/comp-308-project/bud.cpp",
		"/home/simon/workspace/comp-308-project/internode.hpp",
		"/home/simon/workspace/comp-308-project/thing.hpp",
		"/home/simon/workspace/comp-308-project/thing.cpp",
		"/home/simon/workspace/comp-308-project/glHeaders.hpp",
		"/tmp/antons_opengl_tutorials_book/03_vertex_buffer_objects/test_vs.glsl",
		"/tmp/antons_opengl_tutorials_book/03_vertex_buffer_objects/test_fs.glsl",
		"/home/simon/workspace/comp-308-project/vboutils.cpp",
		"/home/simon/workspace/comp-308-project/vboutils.hpp",
		"/home/simon/workspace/comp-308-project/shaders/test_fs.glsl",
		"/home/simon/workspace/comp-308-project/shaders/test_vs.glsl",
		"/home/simon/workspace/comp-308-project/sphere.cpp",
		"/home/simon/workspace/comp-308-project/primitives.hpp",
		"/home/simon/workspace/comp-308-project/project.sublime-project",
		"/home/simon/workspace/comp-308-assignment-3/vec.c",
		"/home/simon/workspace/comp-308-assignment-2/main.cpp",
		"/home/simon/workspace/comp-308-assignment-3/Makefile",
		"/home/simon/workspace/comp-308-assignment-3/shader.cpp",
		"/home/simon/workspace/comp-308-assignment-3/shader.hpp",
		"/home/simon/workspace/comp-308-assignment-3/include/GL/glew.h",
		"/home/simon/workspace/comp-308-assignment-3/Box.obj",
		"/home/simon/workspace/comp-308-assignment-3/Table.obj",
		"/home/simon/workspace/comp-308-assignment-3/TextureDemo.cpp",
		"/home/simon/workspace/comp-308-assignment-3/G308_Geometry.h",
		"/home/simon/workspace/comp-308-assignment-3/G308_ImageLoader.h",
		"/tmp/tmp.NAqUqj2mTD",
		"/home/simon/workspace/comp-308-assignment-3/CatmullRom.hpp",
		"/home/simon/workspace/comp-308-assignment-3/CatmullRom.cpp",
		"/home/simon/workspace/comp-308-assignment-3/main.cpp",
		"/home/simon/workspace/nwen-302-lab-2/saworig.c",
		"/home/simon/workspace/nwen-302-lab-2/Doxyfile",
		"/home/simon/workspace/comp-308-project/Makefile",
		"/home/simon/workspace/comp-308-project/2d-lsystem/main.py",
		"/home/simon/workspace/comp-308-project/budding.py",
		"/home/simon/workspace/comp-308-project/Bud.hpp",
		"/home/simon/workspace/comp-308-project/Bud.cpp",
		"/home/simon/workspace/nwen-302-lab-2/doxy.conf",
		"/home/simon/workspace/nwen-302-lab-2/log2.txt",
		"/home/simon/workspace/nwen-302-lab-2/log3.txt",
		"/home/simon/workspace/nwen-302-lab-2/log.txt",
		"/home/simon/mnt/workspace/nwen-302-lab-2/ethernet.h",
		"/home/simon/mnt/workspace/nwen-302-lab-2/ethernet.c",
		"/home/simon/mnt/workspace/nwen-302-lab-2/arp.c",
		"/home/simon/mnt/workspace/nwen-302-lab-2/arp.h",
		"/home/simon/mnt/workspace/nwen-302-lab-2/ip.c",
		"/home/simon/mnt/workspace/nwen-302-lab-2/ip.h",
		"/home/simon/mnt/workspace/nwen-302-lab-2/stopandwait.c",
		"/home/simon/mnt/workspace/nwen-302-lab-2/stopandwait.h",
		"/home/simon/mnt/workspace/nwen-302-lab-2/STOPANDWAIT",
		"/home/simon/mnt/workspace/nwen-302-lab-2/*.c",
		"/home/simon/mnt/workspace/nwen-302-lab-2/arp.c*.h",
		"/home/simon/workspace/comp-308-assignment-3/vec3.hpp",
		"/home/simon/workspace/comp-308-assignment-3/vec3.cpp",
		"/home/simon/workspace/comp-308-assignment-3/vec2.hpp",
		"/home/simon/workspace/comp-308-assignment-3/vec2.cpp",
		"/home/simon/workspace/comp-308-assignment-3/SkeletonView.hpp",
		"/home/simon/workspace/comp-308-assignment-3/SkeletonView.cpp",
		"/home/simon/workspace/comp-308-assignment-2/priman.amc",
		"/home/simon/workspace/comp-308-assignment-2/Motion.cpp",
		"/home/simon/workspace/comp-308-assignment-2/test.json",
		"/home/simon/workspace/comp-308-assignment-3/walkthing.json",
		"/home/simon/workspace/comp-308-assignment-3/bar.json",
		"/home/simon/workspace/comp-308-assignment-3/Skeleton.cpp",
		"/home/simon/workspace/comp-308-assignment-3/Skeleton.hpp",
		"/home/simon/workspace/comp-308-assignment-3/Rotations.hpp",
		"/home/simon/workspace/comp-308-assignment-3/Rotations.cpp",
		"/home/simon/workspace/comp-308-assignment-3/walk.json",
		"/home/simon/workspace/comp-308-assignment-3/quaternion.hpp",
		"/home/simon/workspace/comp-308-assignment-3/quaternion.cpp"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"100",
			"90",
			"50",
			"% 1",
			"100",
			"branch_verts",
			"_lists",
			"vertex",
			"basic-ver",
			"basic",
			"out",
			"Source_files",
			"MUPARSER",
			"textureID",
			"bark_normal_texture",
			"bark_normal",
			"bark_normal_texture_location",
			"GLFW_RELEASE",
			"!enable\\[.-1\\];",
			"!enable[.-1];",
			"scancode",
			"action",
			"quq",
			"1",
			"<",
			">",
			"-1",
			"=1",
			"; ++",
			"0",
			"b",
			"25",
			"3",
			"2",
			"1",
			"2",
			"}\n",
			"20",
			"200",
			"100",
			"50",
			"10",
			"100",
			"\\s*;",
			"=",
			"20",
			":",
			"200",
			" 					: ",
			":",
			"200",
			" 					: ",
			":",
			"attraction_point_count",
			"update",
			"0",
			"1",
			"verts",
			"grid_shader",
			"/d",
			"stepY/dy",
			"/d",
			"d",
			"mod(",
			"T",
			"origin.",
			".*face.*\n.*face.*\n.*face.*",
			"w",
			", d",
			"(d",
			"[2]",
			"[1]",
			"[0]",
			"origin[0]",
			"x",
			"shader",
			"GL_CULL",
			"(b",
			"b",
			"voxel_size",
			"x",
			"200",
			"glDisableVertexAttribArray",
			"point_shader",
			"x",
			"precision",
			"in",
			"glm",
			"y",
			"x",
			"300",
			"3",
			"10",
			"GL_LINEAR",
			"100",
			"tb",
			"unsigned char",
			"branch_shader",
			"shadows",
			"pixels",
			"h",
			"ShadePlane",
			"RayTracer",
			"Uint8",
			"branch_radius_parser",
			"radius",
			"branch_radius_parser",
			"descendants",
			"k",
			"init_parser",
			"glew",
			"GLEW",
			"glew",
			"GLEW",
			";",
			"=",
			"int",
			"float",
			".get<double>(",
			"tree_params",
			"    ",
			"int",
			"float",
			"s",
			"influence_distance",
			"kill_distance",
			"branch_length",
			"radius"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"action==GLFW_RELEASE",
			";",
			"",
			"add_vertex(points, triangle_points, triangle_normals, colors, \\1, \\2);",
			"cross(v2-v1, v2-v3)",
			"cross(v2-v1, v2-v3)\n				\n",
			"				v1 = \\1;\n				v2 = \\2;\n				v3 = \\3;\n				n = cross(v1, v2);\n\n				triangle_points.push_back(v1);\n				triangle_points.push_back(v2);\n				triangle_points.push_back(v3);\n				triangle_normals.push_back(n);\n				triangle_normals.push_back(n);\n				triangle_normals.push_back(n);\n				\n",
			"",
			"vec3(0, 0, 1)); // \\1",
			"vec3(0, 0, 1); // \\1",
			"\\1 - center)",
			"\\n\\1triangle_points.push_back(\\2);\\n\\1triangle_normals.push_back(normalize(\\2));\\n",
			"\\n\\1triangle_points.push_back(\\2);\\n\\1triangle_normals.push_back(normalize(\\2));",
			"\\n\\1triangle_points.push_back(\\2);",
			"\\n\\1triangle_points.push_back(\\2)",
			"\\n\\1triangle_points.push_back(\\2);",
			"\\1",
			"\\t\\t",
			"\\1\\t\\2\\t\\3\\t\\4\\t\\5\\t\\6\\t\\7\\t\\8\\n",
			"\\1\\t\\2\\t\\3\\t\\4\\t\\n",
			"\\1\\t\\2\\t\\3\\t\\4\\t",
			"\\n",
			"branches.insert",
			"",
			"push_back",
			"mesh",
			"Mesh",
			"",
			"\\n",
			"",
			"ob.scale	= 0.5;",
			"ob.scale	= 2;",
			"//ob.object->toggleMode();",
			"",
			"\\n",
			"%u",
			"CNET_trace(\\1",
			"CNET_trace(",
			"0.56,\n               [  ",
			"\"last\":0.69",
			"0.69,\n               [  ",
			"0.56",
			"\"first\":0.43",
			"\"frames\":[  \n            [  \n               0.43",
			"0.13",
			"\"first\":0",
			"[\\n                  \\1,\\n                  \\2,\\n                  \\3\\n",
			"[\\n                  \\1,\\n                  \\2,\\n                  \\3",
			"",
			" ",
			"TABLE_SIZE",
			"float(TABLE_SIZE)",
			"vec2 ",
			"vec2",
			"1",
			"0",
			"\", \"",
			"}",
			"",
			"shadowMat",
			"mode != SHADOW",
			"",
			"//printf",
			"  end",
			"dof rx ry rz",
			"humerus \\1 90 0",
			"humerus 0 0 \\1",
			"humerus 0 \\1",
			"humerus \\1 0 90",
			"humerus 0 \\1 90",
			"humerus 0 \\1",
			"",
			"lhumerus \\1 0 0\\nrhumerus \\1 0 0",
			"0",
			"() {",
			"",
			"bone->\\1",
			"vector",
			"",
			"\\1",
			"ret.\\1",
			"\\1.compare(\"\\2\")",
			"dir.",
			"vec3",
			"Vec3",
			"dir->\\1",
			"",
			"\\1\\n",
			"\\n",
			"v \\1 \\2 \\3\\nv \\4 \\5 \\6\\nv \\7 \\8 \\9\\n",
			"\\n",
			"",
			"v \\1 \\2 \\3\\nv \\4 \\5 \\6\\nv \\7 \\8 \\9\\n",
			"v \\1 \\2 \\3\\n",
			"v \\1 \\2 \\3",
			"",
			"\\1: \\2,",
			"\\1: \\2",
			"perms = \\1",
			"elif info.AllocationProtect == ",
			"if info.AllocationProtect == ",
			"if info.AllocationProtect ==",
			"x",
			"\\nprintf(\"rti \\1_\\2 = 0x%08x\\\\n\", \\1_\\2);\\n",
			"\\nprintf(\"rti \\1_\\2 = 0x%08x\\n\", \\1_\\2);\\n",
			"printf(\"rti \\1_\\2 = 0x%08x\\n\", \\1_\\2);",
			"_on_hook_asm",
			"_spin_",
			"_on_hook_asm",
			"PyLong_AsUintptr_t",
			"uintptr_t",
			"uint_n_t",
			"spinunlock",
			"spinlock",
			"onhookasm",
			"",
			"call",
			"\\1 e\\2",
			"'\\1', ",
			"self.\\1, ",
			"\\t\\t\\t\\t",
			"",
			"malloc(",
			"",
			"\\1",
			"\\a",
			"\\n",
			"TAG76878: \\1"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "tree.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "tree.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "voxels.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "voxels.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "branch.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 525,
						"regions":
						{
						},
						"selection":
						[
							[
								181,
								181
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "branch.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 800,
						"regions":
						{
						},
						"selection":
						[
							[
								343,
								343
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "treerenderer.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "treerenderer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "userinterface.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "userinterface.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "leafmodel.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 390,
						"regions":
						{
						},
						"selection":
						[
							[
								170,
								170
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "leafmodel.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "random.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 269,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 14,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 70,
						"regions":
						{
						},
						"selection":
						[
							[
								70,
								70
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "shader.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "shader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "raytracer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3731,
						"regions":
						{
						},
						"selection":
						[
							[
								2605,
								2605
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 1458.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "shaders/branch-vertex.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "shaders/branch-geometry.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "layout(points) in;",
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "shaders/branch-fragment.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "shaders/leaf-vertex.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1305,
						"regions":
						{
						},
						"selection":
						[
							[
								288,
								288
							]
						],
						"settings":
						{
							"auto_name": "layout(location = 0) in vec3 vertex_position;",
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "shaders/grid-vertex.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "shaders/basic-texture-fragment.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "shaders/leaf-fragment.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "shaders/leaf-debug-vertex.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 662,
						"regions":
						{
						},
						"selection":
						[
							[
								557,
								557
							]
						],
						"settings":
						{
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "shaders/leaf-debug-geometry.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1225,
						"regions":
						{
						},
						"selection":
						[
							[
								394,
								394
							]
						],
						"settings":
						{
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "shaders/sphere-geometry.glsl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/OpenGL Shading Language (GLSL)/GLSL.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 93.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 118.0
	},
	"output.gotodocumentation":
	{
		"height": 118.0
	},
	"output.variable_get":
	{
		"height": 118.0
	},
	"project": "project.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"tre",
				"~/workspace/comp-308-project/treerenderer.cpp"
			],
			[
				"leaf",
				"leaf-vertex.glsl"
			],
			[
				"us",
				"~/workspace/comp-308-project/userinterface.cpp"
			],
			[
				"tree",
				"~/workspace/comp-308-project/treerenderer.cpp"
			],
			[
				"bran",
				"branch-vertex.glsl"
			],
			[
				"sha",
				"~/workspace/comp-308-project/shader.cpp"
			],
			[
				"branc",
				"branch-vertex.glsl"
			],
			[
				"",
				"branch-vertex.glsl"
			],
			[
				"bra",
				"branch-geometry.glsl"
			],
			[
				"branch",
				"branch-geometry.glsl"
			],
			[
				"basic",
				"basic-vertex.glsl"
			],
			[
				"frag",
				"basic-fragment.glsl"
			],
			[
				"shad",
				"~/workspace/comp-308-project/shader.cpp"
			],
			[
				"vo",
				"~/workspace/comp-308-project/voxels.hpp"
			],
			[
				"sh",
				"~/workspace/comp-308-project/shader.cpp"
			],
			[
				"main",
				"~/workspace/comp-308-project/main.cpp"
			],
			[
				"inter",
				"~/workspace/comp-308-project/userinterface.cpp"
			],
			[
				"treere",
				"~/workspace/comp-308-project/treerenderer.cpp"
			],
			[
				"sph",
				"sphere-geometry.glsl"
			],
			[
				"gr",
				"grid-vertex.glsl"
			],
			[
				"fra",
				"basic-fragment.glsl"
			],
			[
				"leafmo",
				"~/workspace/comp-308-project/leafmodel.cpp"
			],
			[
				"vert",
				"basic-vertex.glsl"
			],
			[
				"ma",
				"~/workspace/comp-308-project/main.cpp"
			],
			[
				"shader",
				"~/workspace/comp-308-project/shader.cpp"
			],
			[
				"te",
				"~/workspace/comp-308-project/tree.hpp"
			],
			[
				"lea",
				"leaf-vertex.glsl"
			],
			[
				"sp",
				"sphere-geometry.glsl"
			],
			[
				"spher",
				"sphere-geometry.glsl"
			],
			[
				"ran",
				"~/workspace/comp-308-project/random.cpp"
			],
			[
				"sim",
				"~/workspace/comp-308-project/simulation.hpp"
			],
			[
				"rot",
				"~/workspace/comp-308-assignment-3/Rotations.cpp"
			],
			[
				"make",
				"~/workspace/comp-308-assignment-3/Makefile"
			],
			[
				"main.",
				"~/workspace/comp-308-assignment-2/main.cpp"
			],
			[
				"mai",
				"~/workspace/comp-308-project/2d-lsystem/main.py"
			],
			[
				"un",
				"untitled"
			],
			[
				"mo",
				"~/workspace/comp-308-assignment-2/Motion.hpp"
			],
			[
				"ske",
				"~/workspace/comp-308-assignment-2/Skeleton.hpp"
			],
			[
				"p",
				"~/workspace/comp-308-assignment-2/priman.asf"
			],
			[
				"pr",
				"~/workspace/comp-308-assignment-2/priman.amc"
			],
			[
				"vec3",
				"~/workspace/comp-308-assignment-2/vec3.hpp"
			],
			[
				"tt",
				"~/workspace/comp-308-assignment-2/tt.amc"
			],
			[
				"car",
				"~/workspace/swen-222-assignment-1/rules/cards.json"
			],
			[
				"pos",
				"~/workspace/comp-308-assignment-2/poses.amc"
			],
			[
				"ve",
				"~/workspace/comp-308-assignment-2/vec3.cpp"
			],
			[
				"vec",
				"~/workspace/comp-308-assignment-2/vec3.hpp"
			],
			[
				"ho",
				"~/workspace/pymod/hook_internals.py"
			],
			[
				"loa",
				"~/workspace/pymod/loader.c"
			],
			[
				"po",
				"~/workspace/pymod/poop.asm"
			],
			[
				"gad",
				"~/Desktop/fusion/gadgets.asm"
			],
			[
				"snipp",
				"~/notify-me/interactive_console_snippit.py"
			],
			[
				"inde",
				"frontend/index.html"
			],
			[
				"app",
				"app.yaml"
			],
			[
				"quer",
				"query_parser.py"
			],
			[
				"not",
				"notify_me.py"
			],
			[
				"model",
				"model.py"
			],
			[
				"api",
				"api.py"
			],
			[
				"mode",
				"model.py"
			],
			[
				"ap",
				"api.py"
			],
			[
				"parse",
				"query_parser.py"
			],
			[
				"no",
				"notify_me.py"
			],
			[
				"in",
				"index.yaml"
			],
			[
				".js",
				"frontend/js/views/feeds.js"
			],
			[
				"app.js",
				"frontend/js/app.js"
			],
			[
				"sub",
				"frontend/tpl/SubscribeView.html"
			],
			[
				"sen",
				"senders.py"
			],
			[
				"model.js",
				"frontend/js/model.js"
			],
			[
				"style",
				"frontend/css/styles.css"
			],
			[
				"subs",
				"frontend/tpl/SubscribeView.html"
			],
			[
				"html",
				"frontend/tpl/FullFeedView.html"
			],
			[
				"feeds.",
				"frontend/js/views/feeds.js"
			],
			[
				"sett",
				"settings.py"
			],
			[
				"query",
				"query_parser.py"
			],
			[
				"game",
				"~/programming/shiny-wight/game.py"
			],
			[
				"sty",
				"~/notify-me/frontend/css/styles.css"
			],
			[
				"pars",
				"query_parser.py"
			],
			[
				"fish",
				"~/.oh-my-fish/themes/bobthefish/fish_prompt.fish"
			],
			[
				"arg",
				"feed_arguments.py"
			],
			[
				".git",
				".gitignore"
			],
			[
				"boo",
				"boolean.py"
			],
			[
				"admin",
				"admin.py"
			],
			[
				"mod",
				"model.py"
			],
			[
				"par",
				"parsers.py"
			],
			[
				"test.",
				"test.py"
			],
			[
				"bool",
				"boolean.py"
			],
			[
				"feed_a",
				"feed_arguments.py"
			],
			[
				"set",
				"settings.py"
			],
			[
				"create",
				"create_sample_filters.py"
			],
			[
				"pypar",
				"pyparsing.py"
			],
			[
				"mat",
				"matcher.py"
			],
			[
				"ad",
				"admin.py"
			],
			[
				"inver",
				"inverter.py"
			],
			[
				"sender",
				"senders.py"
			],
			[
				"deser",
				"deserializers.py"
			],
			[
				"inverter",
				"inverter.py"
			],
			[
				"cons",
				"interactive_console_snippit.py"
			],
			[
				"prosp",
				"prospector.py"
			],
			[
				"bloo",
				"bloomfilter.py"
			],
			[
				"invert",
				"inverter.py"
			],
			[
				"adm",
				"admin.py"
			],
			[
				"inv",
				"inverter.py"
			],
			[
				"sam",
				"sample_appengine_config.py"
			],
			[
				"same",
				"submodules/feedparser/feedparser/tests/wellformed/rss/channel_author_map_author_detail_email.xml"
			],
			[
				"feed",
				"feed_loader.py"
			],
			[
				"console",
				"interactive_console_snippit.py"
			],
			[
				"con",
				"appengine_config.py"
			],
			[
				"pymmh3",
				"pymmh3.py"
			],
			[
				"hash",
				"pds/hashfunctions.py"
			],
			[
				"bit",
				"bitstring.py"
			],
			[
				"bloom",
				"pds/bloomfilter.py"
			],
			[
				"cbdf",
				"submodules/python-pds/pds/cdbf.py"
			],
			[
				"cdbf",
				"submodules/python-pds/pds/cdbf.py"
			],
			[
				"__in",
				"submodules/python-pds/pds/__init__.py"
			],
			[
				"__i",
				"tweepy/__init__.py"
			],
			[
				"hll",
				"submodules/python-pds/pds/hll.py"
			],
			[
				"feed_lo",
				"feed_loader.py"
			],
			[
				"inve",
				"inverter.py"
			],
			[
				"send",
				"senders.py"
			],
			[
				"feed_",
				"feed_loader.py"
			],
			[
				"des",
				"deserializers.py"
			],
			[
				"yam",
				"app.yaml"
			],
			[
				"parsers",
				"parsers.py"
			],
			[
				"json",
				"jsoncreate_helper.py"
			],
			[
				"sho",
				"show_comment_stats.sh"
			],
			[
				"test",
				"test_webhook.py"
			],
			[
				"yaml",
				"app.yaml"
			],
			[
				"showcom",
				"show_comment_stats.sh"
			],
			[
				"feed_loa",
				"feed_loader.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"~/workspace/comp-308-assignment-3/project.sublime-project"
			],
			[
				"test",
				"~/notify-me/notify_me.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 50.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
